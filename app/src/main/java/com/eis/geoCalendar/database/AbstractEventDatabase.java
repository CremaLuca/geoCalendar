package com.eis.geoCalendar.database;

import android.content.Context;

import androidx.collection.ArrayMap;
import androidx.room.Database;
import androidx.room.Room;
import androidx.room.RoomDatabase;

import java.util.Map;

/**
 * Class representing the actual Room database in the memory.
 * This should not be instantiated outside of the package.
 * This database only handles writing and reading from memory, with no logic on what is stored,
 * as long as they are StringEntities.
 *
 * @author Riccardo De Zen.
 */
@Database(entities = StringEntity.class, version = 1)
public abstract class AbstractEventDatabase extends RoomDatabase {

    //Map containing the active instances for this database.
    private static Map<String, AbstractEventDatabase> activeInstances = new ArrayMap<>();

    /**
     * Method generated by Room to retrieve the appropriate access object to this Database.
     *
     * @return The appropriate {@link AbstractStringDao} for this database.
     */
    abstract AbstractStringDao access();

    /**
     * Only intended way to instantiate an instance of this Database.
     *
     * @param context The calling Context, needed for File directory.
     * @param name    The name for this Database. Will be used for the file.
     * @return An appropriately built instance for this Database.
     */
    static AbstractEventDatabase getInstance(Context context, String name) {
        if (activeInstances.get(name) != null)
            return activeInstances.get(name);
        AbstractEventDatabase newInstance = Room.databaseBuilder(context, AbstractEventDatabase.class, name)
                .allowMainThreadQueries()
                .enableMultiInstanceInvalidation()
                .build();
        activeInstances.put(name, newInstance);
        return newInstance;
    }

    /**
     * Same as {@link AbstractEventDatabase#getInstance(Context, String)} but the database is created
     * and stored directly in the device's memory, it can prove useful in some scenarios, but it
     * has been added for testing purposes only: Room databases cannot be physically instantiated
     * during Unit Testing.
     *
     * @param context The calling Context, needed for File directory.
     * @param name    The name for this Database.
     * @return An appropriately built instance for this Database.
     */
    static AbstractEventDatabase getInMemoryInstance(Context context, String name) {
        if (activeInstances.get(name) != null)
            return activeInstances.get(name);
        AbstractEventDatabase newInstance = Room.inMemoryDatabaseBuilder(context,
                AbstractEventDatabase.class)
                .allowMainThreadQueries()
                .enableMultiInstanceInvalidation()
                .build();
        activeInstances.put(name, newInstance);
        return newInstance;
    }
}
